     1                                  ; ==============================================================================
     2                                  ; BSS
     3                                  ; ==============================================================================
     4                                  
     5                                  section .bss
     6                                    BufferLength equ 2014
     7 00000000 <res 000007DE>            Buff resb BufferLength
     8                                  
     9                                  ; ==============================================================================
    10                                  ; Data
    11                                  ; ==============================================================================
    12                                  
    13                                  section .data
    14                                  
    15                                  ; ==============================================================================
    16                                  ; Text
    17                                  ; ==============================================================================
    18                                  
    19                                  section .text
    20                                    global _start
    21                                  
    22                                  _start:
    23 00000000 90                        nop ; Keep gdb happy
    24                                  
    25                                  Read:
    26 00000001 B803000000                mov eax, 3 ; Use sys_read
    27 00000006 BB00000000                mov ebx, 0 ; Read from stdin
    28 0000000B B9[00000000]              mov ecx, Buff ; Use the address of the buffer
    29 00000010 BADE070000                mov edx, BufferLength ; Read one character from stdin
    30 00000015 CD80                      int 80h
    31 00000017 89C6                      mov esi, eax
    32 00000019 83F800                    cmp eax, 0 ; Check if the return value was 0, if so we're at the end
    33 0000001C 7433                      je Exit
    34                                  
    35 0000001E 89F1                      mov ecx, esi
    36 00000020 BD[00000000]              mov ebp, Buff
    37 00000025 4D                        dec ebp
    38                                  
    39                                  Scan:
    40 00000026 807C0D0061                cmp byte [ebp+ecx], 61h ; Check if the character is below lowercase 'a'
    41 0000002B 720C                      jb Next ; Scan the next character if it is already uppercase
    42 0000002D 807C0D007A                cmp byte [ebp+ecx], 7Ah ; Check if the character is above lowercase 'z'
    43 00000032 7705                      ja Next ; Scan the next character if it is already uppercase
    44                                  
    45 00000034 806C0D0020                sub byte [ebp+ecx], 20h ; At this point, the character is lowercase
    46                                  
    47                                  Next:
    48 00000039 49                        dec ecx
    49 0000003A 75EA                      jnz Scan
    50                                  
    51                                  Write:
    52 0000003C B804000000                mov eax, 4 ; Use sys_write
    53 00000041 BB01000000                mov ebx, 1 ; Write to stdout
    54 00000046 B9[00000000]              mov ecx, Buff
    55 0000004B 89F2                      mov edx, esi
    56 0000004D CD80                      int 80h
    57 0000004F EBB0                      jmp Read
    58                                  
    59                                  Exit:
    60 00000051 B801000000                mov eax, 1
    61 00000056 BB00000000                mov ebx, 0
    62 0000005B CD80                      int 80h
